package mocks

import (
	"net/http"

	"github.com/stretchr/testify/mock"
)

// SocketIO is an autogenerated mock type for the Socket type
type SocketIO struct {
	mock.Mock
}

// BroadcastTo provides a mock function with given fields: room, event, args
func (_m *SocketIO) BroadcastTo(room string, event string, args ...interface{}) error {
	ret := _m.Called(room, event, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) error); ok {
		r0 = rf(room, event, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Emit provides a mock function with given fields: event, args
func (_m *SocketIO) Emit(event string, args ...interface{}) error {
	ret := _m.Called(event, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(event, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *SocketIO) Id() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Join provides a mock function with given fields: room
func (_m *SocketIO) Join(room string) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Leave provides a mock function with given fields: room
func (_m *SocketIO) Leave(room string) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// On provides a mock function with given fields: event, f
func (_m *SocketIO) On(event string, f interface{}) error {
	ret := _m.Called(event, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(event, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields:
func (_m *SocketIO) Request() *http.Request {
	ret := _m.Called()

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// Rooms provides a mock function with given fields:
func (_m *SocketIO) Rooms() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
