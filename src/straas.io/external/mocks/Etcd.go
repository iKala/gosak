package mocks

import "github.com/stretchr/testify/mock"

import "time"
import "github.com/coreos/etcd/client"

// Etcd is an autogenerated mock type for the Etcd type
type Etcd struct {
	mock.Mock
}

// Get provides a mock function with given fields: etcdKey, recursive
func (_m *Etcd) Get(etcdKey string, recursive bool) (*client.Response, error) {
	ret := _m.Called(etcdKey, recursive)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(string, bool) *client.Response); ok {
		r0 = rf(etcdKey, recursive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(etcdKey, recursive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAndWatch provides a mock function with given fields: etcdKey, done
func (_m *Etcd) GetAndWatch(etcdKey string, done <-chan bool) <-chan *client.Response {
	ret := _m.Called(etcdKey, done)

	var r0 <-chan *client.Response
	if rf, ok := ret.Get(0).(func(string, <-chan bool) <-chan *client.Response); ok {
		r0 = rf(etcdKey, done)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *client.Response)
		}
	}

	return r0
}

// IsNotFound provides a mock function with given fields: err
func (_m *Etcd) IsNotFound(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RefreshTTL provides a mock function with given fields: etcdKey, ttl
func (_m *Etcd) RefreshTTL(etcdKey string, ttl time.Duration) (*client.Response, error) {
	ret := _m.Called(etcdKey, ttl)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(string, time.Duration) *client.Response); ok {
		r0 = rf(etcdKey, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(etcdKey, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: etcdKey, value
func (_m *Etcd) Set(etcdKey string, value string) (*client.Response, error) {
	ret := _m.Called(etcdKey, value)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(string, string) *client.Response); ok {
		r0 = rf(etcdKey, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(etcdKey, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetWithTTL provides a mock function with given fields: etcdKey, value, ttl
func (_m *Etcd) SetWithTTL(etcdKey string, value string, ttl time.Duration) (*client.Response, error) {
	ret := _m.Called(etcdKey, value, ttl)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) *client.Response); ok {
		r0 = rf(etcdKey, value, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(etcdKey, value, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
