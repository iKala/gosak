package etcd

import "github.com/coreos/etcd/client"
import "github.com/stretchr/testify/mock"

import "golang.org/x/net/context"

// keysAPIMock is an autogenerated mock type for the keysAPIMock type
type keysAPIMock struct {
	mock.Mock
}

// watcherMock is an autogenerated mock type for the keysAPIMock type
type watcherMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key, opts
func (_m *keysAPIMock) Delete(ctx context.Context, key string, opts *client.DeleteOptions) (*client.Response, error) {
	ret := _m.Called(ctx, key, opts)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteOptions) *client.Response); ok {
		r0 = rf(ctx, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *client.DeleteOptions) error); ok {
		r1 = rf(ctx, key, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key, opts
func (_m *keysAPIMock) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {
	ret := _m.Called(ctx, key, opts)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOptions) *client.Response); ok {
		r0 = rf(ctx, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOptions) error); ok {
		r1 = rf(ctx, key, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value, opts
func (_m *keysAPIMock) Set(ctx context.Context, key string, value string, opts *client.SetOptions) (*client.Response, error) {
	ret := _m.Called(ctx, key, value, opts)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.SetOptions) *client.Response); ok {
		r0 = rf(ctx, key, value, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.SetOptions) error); ok {
		r1 = rf(ctx, key, value, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watcher provides a mock function with given fields: key, opts
func (_m *keysAPIMock) Watcher(key string, opts *client.WatcherOptions) watcher {
	ret := _m.Called(key, opts)

	var r0 watcher
	if rf, ok := ret.Get(0).(func(string, *client.WatcherOptions) watcher); ok {
		r0 = rf(key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watcher)
		}
	}

	return r0
}

// Next provides a mock function with given fields: ctx
func (_m *watcherMock) Next(ctx context.Context) (*client.Response, error) {
	ret := _m.Called(ctx)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(context.Context) *client.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
