package mocks

import "straas.io/pierce"
import "github.com/stretchr/testify/mock"

import "time"

// Core is an autogenerated mock type for the Core type
type Core struct {
	mock.Mock
}

// Get provides a mock function with given fields: room, key
func (_m *Core) Get(room pierce.RoomMeta, key string) (interface{}, uint64, error) {
	ret := _m.Called(room, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(pierce.RoomMeta, string) interface{}); ok {
		r0 = rf(room, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(pierce.RoomMeta, string) uint64); ok {
		r1 = rf(room, key)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(pierce.RoomMeta, string) error); ok {
		r2 = rf(room, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: room
func (_m *Core) GetAll(room pierce.RoomMeta) (interface{}, uint64, error) {
	ret := _m.Called(room)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(pierce.RoomMeta) interface{}); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(pierce.RoomMeta) uint64); ok {
		r1 = rf(room)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(pierce.RoomMeta) error); ok {
		r2 = rf(room)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Join provides a mock function with given fields: _a0
func (_m *Core) Join(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Leave provides a mock function with given fields: _a0
func (_m *Core) Leave(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Set provides a mock function with given fields: room, key, value, ttl
func (_m *Core) Set(room pierce.RoomMeta, key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(room, key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(pierce.RoomMeta, string, interface{}, time.Duration) error); ok {
		r0 = rf(room, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Core) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *Core) Stop() {
	_m.Called()
}
