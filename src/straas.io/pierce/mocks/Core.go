package mocks

import "straas.io/pierce"
import "github.com/stretchr/testify/mock"

// Core is an autogenerated mock type for the Core type
type Core struct {
	mock.Mock
}

// Get provides a mock function with given fields: roomId, key
func (_m *Core) Get(roomId string, key string) (interface{}, error) {
	ret := _m.Called(roomId, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(roomId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(roomId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: roomId
func (_m *Core) GetAll(roomId string) (interface{}, error) {
	ret := _m.Called(roomId)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: _a0
func (_m *Core) Join(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Leave provides a mock function with given fields: _a0
func (_m *Core) Leave(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Set provides a mock function with given fields: roomId, key, value
func (_m *Core) Set(roomId string, key string, value interface{}) error {
	ret := _m.Called(roomId, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(roomId, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Core) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *Core) Stop() {
	_m.Called()
}
