package core

import (
	"fmt"
	"testing"
	"time"

	"github.com/coreos/etcd/client"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"

	etcdMocks "straas.io/external/mocks"
	"straas.io/pierce"
	"straas.io/pierce/mocks"
)

var (
	troom1 = pierce.RoomMeta{
		Namespace: "xxx",
		ID:        "aaa",
	}
	troom2 = pierce.RoomMeta{
		Namespace: "xxx",
		ID:        "bbb",
	}
	troom3 = pierce.RoomMeta{
		Namespace: "xxx",
		ID:        "ccc",
	}
)

// roomMock is an autogenerated mock type for the roomMock type
type roomMock struct {
	mock.Mock
}

// Empty provides a mock function with given fields:
func (_m *roomMock) Empty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Join provides a mock function with given fields: _a0
func (_m *roomMock) Join(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Leave provides a mock function with given fields: _a0
func (_m *roomMock) Leave(_a0 pierce.SocketConnection) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields:
func (_m *roomMock) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *roomMock) Stop() {
	_m.Called()
}

func TestCore(t *testing.T) {
	suite.Run(t, new(coreTestSuite))
}

type coreTestSuite struct {
	suite.Suite
	impl     *coreImpl
	etcdMock *etcdMocks.Etcd
}

func (s *coreTestSuite) SetupTest() {
	s.etcdMock = &etcdMocks.Etcd{}
	s.impl = NewCore(s.etcdMock, "/pierce").(*coreImpl)
}

func (s *coreTestSuite) TestGet() {
	resp := &client.Response{
		Action: "get",
		Node: &client.Node{
			Key:           "/pierce/xxx/47/bc/aaa/bbb",
			Dir:           false,
			Value:         "1234",
			ModifiedIndex: 464,
		},
	}
	s.etcdMock.On("Get", "/pierce/xxx/47/bc/aaa/bbb", true).Return(resp, nil).Once()

	v, version, err := s.impl.Get(troom1, "bbb")
	s.NoError(err)
	s.Equal(v, float64(1234))
	s.Equal(version, uint64(464))
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestGetAll() {
	resp := &client.Response{
		Action: "get",
		Node: &client.Node{
			Key:           "/pierce/xxx/47/bc/aaa",
			Dir:           false,
			Value:         "1234",
			ModifiedIndex: 373,
		},
	}
	s.etcdMock.On("Get", "/pierce/xxx/47/bc/aaa", true).Return(resp, nil).Once()

	v, version, err := s.impl.GetAll(troom1)
	s.NoError(err)
	s.Equal(v, float64(1234))
	s.Equal(version, uint64(373))
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestSet() {
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, nil).Once()
	s.etcdMock.On("SetWithTTL", "/pierce/xxx/47/bc/aaa/bbb", "1234", time.Minute).Return(nil, nil).Once()
	s.etcdMock.On("IsNotFound", error(nil)).Return(false).Once()

	err := s.impl.Set(troom1, "bbb", 1234, time.Minute)
	s.NoError(err)
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestSetFirstTime() {
	someErr := fmt.Errorf("some err")
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, someErr).Once()
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, nil).Once()
	s.etcdMock.On("SetWithTTL", "/pierce/xxx/47/bc/aaa/bbb", "1234", time.Minute).Return(nil, nil).Once()
	s.etcdMock.On("IsNotFound", someErr).Return(true).Once()

	err := s.impl.Set(troom1, "bbb", 1234, time.Minute)
	s.NoError(err)
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestSetError() {
	someErr := fmt.Errorf("some err")
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, someErr).Once()
	s.etcdMock.On("IsNotFound", someErr).Return(false).Once()

	err := s.impl.Set(troom1, "bbb", 1234, time.Minute)
	s.Error(err)
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestSetError2() {
	someErr := fmt.Errorf("some err")
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, nil).Once()
	s.etcdMock.On("SetWithTTL", "/pierce/xxx/47/bc/aaa/bbb", "1234", time.Minute).Return(nil, someErr).Once()
	s.etcdMock.On("IsNotFound", error(nil)).Return(false).Once()

	err := s.impl.Set(troom1, "bbb", 1234, time.Minute)
	s.Error(err)
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestSetError3() {
	someErr := fmt.Errorf("some err")
	s.etcdMock.On("RefreshTTL", "/pierce/xxx/47/bc/aaa", roomTTL).Return(nil, someErr).Twice()
	s.etcdMock.On("SetWithTTL", "/pierce/xxx/47/bc/aaa/bbb", "1234", time.Minute).Return(nil, nil).Once()
	s.etcdMock.On("IsNotFound", someErr).Return(true).Once()

	err := s.impl.Set(troom1, "bbb", 1234, time.Minute)
	s.Error(err)
	s.etcdMock.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestJoin() {
	maintain := make(chan time.Time)
	rooms := []*roomMock{}

	c1 := &mocks.SocketConnection{}
	c2 := &mocks.SocketConnection{}
	c1.On("Rooms").Return([]pierce.RoomMeta{troom1, troom2}).Once()
	c2.On("Rooms").Return([]pierce.RoomMeta{troom2, troom3}).Once()

	s.impl.rFactory = func(roomMeta pierce.RoomMeta, etcdKey string) Room {
		room := &roomMock{}
		rooms = append(rooms, room)

		switch roomMeta {
		case troom1:
			room.On("Join", c1).Return().Once()
		case troom2:
			room.On("Join", c1).Return().Once()
			room.On("Join", c2).Return().Once()
		case troom3:
			room.On("Join", c2).Return().Once()
		}
		room.On("Start").Return().Once()
		return room
	}

	s.impl.Join(c1)
	s.impl.Join(c2)
	s.impl.loopOnce(maintain)
	s.impl.loopOnce(maintain)

	s.Equal(s.impl.rooms, map[pierce.RoomMeta]Room{
		troom1: rooms[0],
		troom2: rooms[1],
		troom3: rooms[2],
	})
	for _, room := range rooms {
		room.AssertExpectations(s.T())
	}
}

func (s *coreTestSuite) TestLeave() {
	maintain := make(chan time.Time)

	c1 := &mocks.SocketConnection{}
	c1.On("Rooms").Return([]pierce.RoomMeta{troom1, troom2}).Once()

	roomA := &roomMock{}
	roomB := &roomMock{}
	roomC := &roomMock{}

	roomA.On("Leave", c1).Return().Once()
	roomB.On("Leave", c1).Return().Once()

	s.impl.rooms = map[pierce.RoomMeta]Room{
		troom1: roomA,
		troom2: roomB,
		troom3: roomC,
	}
	s.impl.Leave(c1)
	s.impl.loopOnce(maintain)

	roomA.AssertExpectations(s.T())
	roomB.AssertExpectations(s.T())
	roomC.AssertExpectations(s.T())
}

func (s *coreTestSuite) TestMaintain() {
	maintain := make(chan time.Time, 1)

	roomA := &roomMock{}
	roomB := &roomMock{}
	roomC := &roomMock{}

	roomA.On("Empty").Return(true).Once()
	roomB.On("Empty").Return(false).Once()
	roomC.On("Empty").Return(true).Once()
	roomA.On("Stop").Return().Once()
	roomC.On("Stop").Return().Once()

	s.impl.rooms = map[pierce.RoomMeta]Room{
		troom1: roomA,
		troom2: roomB,
		troom3: roomC,
	}
	maintain <- time.Now()
	s.impl.loopOnce(maintain)

	roomA.AssertExpectations(s.T())
	roomB.AssertExpectations(s.T())
	roomC.AssertExpectations(s.T())

	s.Equal(s.impl.rooms, map[pierce.RoomMeta]Room{
		troom2: roomB,
	})
}
